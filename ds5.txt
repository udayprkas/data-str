q1.)

class Node{
	int data;
	Node next;
	Node(int data){
		this.data=data;
	}
}

class Stack{
	int top;
	int[] arr;
	Node head;
	Stack(){
		top=-1;
	}
	void push(int data){			//==========push = insert beginning
		Node temp=new Node(data);
		
			temp.next=head;
			head=temp;
			top++;
		
	}
	Node pop(){
		if(top == -1){
			System.out.println("Under flow ");
			return null;
		}
		else{
			Node a=head;
			head=head.next;
			top--;
			return a;
		}
	}

	void display(){
		Node temp=head;
		while(temp!=null){
			System.out.println(temp.data);
			temp=temp.next;
		}
	}
}

public class SDemo {
	
	public static void main(String[] args){
		Stack obj=new Stack();
		obj.push(10);
		obj.push(20);
		obj.push(30);
		obj.display();
		Node n=obj.pop();
		//System.out.println(n.data+"=============");
		obj.display();
	}
}

class Queue{
	int arr[];
	int front,rear;
	Queue(){
		front=rear=-1;
		arr=new int[100];
	}
	void insert(int data){
		if(rear==arr.length-1){
			System.out.println("Overflow");			
		}
		else{
			arr[++rear]=data;
				if(front==-1){
					front=0;
				}
		}
	}

	int delete(){
		int x=0;
		if(front==-1){
			System.out.println("Underflow");			
		}
		else{
			x= arr[front];
				if(front==rear){
					front=rear=-1;
				}
				else{
					++front;
				}
			
		}
		return x;
	}

	void print(){
		for(int i=front;i<=rear;i++){
			System.out.print(arr[i]+"	");
		}
	}
}
public class Demo{
	

	public static void main(String[] args){
		Queue q=new Queue();
		q.insert(1);
		q.insert(2);
		q.insert(3);
		q.insert(4);
		q.delete();
		q.print();
	}
}
------------------------------------------------------------------
q2.)


class Node{
	int data;
	Node next;
	Node(int data){
		this.data=data;
	}
}

class Stack{
	int top;
	int[] arr;
	Node head;
	Stack(){
		top=-1;
 	}
	void push(int data){				//==========push = insert beginning
			Node temp=new Node(data);
			temp.next=head;
			head=temp;
			top++;
		
	}
	Node pop(){
		
		if(top == -1){
			System.out.println("Under flow ");
			return null;
		}
		else{
			Node a=head;
			head=head.next;
			top--;
			return a;
		}
		
	}

	void pushInSecondStack(){
		Node temp=head;
		Stack ob=new Stack();
		while(temp!=null){
			temp=temp.next;
			ob.push(pop().data);
		}
	head = ob.head;
	top = ob.top;
	}

	void display(){
		Node temp=head;
		while(temp!=null){
			System.out.print(temp.data+"	");
			temp=temp.next;
		}
		System.out.println();
	}
}

public class SDemo {
	
	public static void main(String[] args){
		Stack obj=new Stack();
		obj.push(10);
		obj.push(20);
		obj.push(30);
		obj.push(40);
		obj.pushInSecondStack();
		obj.display();
		Node n=obj.pop();
		System.out.println("=============");
		System.out.println("pop -> "+n.data);
		System.out.println("=============");
		obj.display();
	}
}
-----------------------------------------------------------------------
q3.)


class Node{
	int data;
	Node next;
	Node(int data){
		this.data=data;
		next=null;
	}
	
}

public class Demo{

	Node front;
	Node rear;
	void enqueue(int data){
		Node temp=new Node(data);
		if(front==null){
			front=rear=temp;
		}
		else{	
			rear.next=temp;
			rear=temp;
		}
	}	
	void dequeue(){
		if(front==rear){
			front=rear=null;
		}
		else{
			reverse();
			front=front.next;
			reverse();
		}
	}
	void reverse(){
		Node pre=rear=null;
		Node ptr=front;
		Node curr=ptr;
		while(ptr!=null){
			curr=ptr.next;
			ptr.next=pre;
			pre=ptr;
			ptr=curr;
		}
		front=pre;
	}
	void print(){
		while(front!=null){
			System.out.println(front.data+"	");
			front=front.next;
		}
	}
	public static void main(String[] args){
		Demo q=new Demo();
		q.enqueue(1);
		q.enqueue(2);
		q.enqueue(3);
		q.enqueue(4);
		q.dequeue();
		q.print();
	}
}
---------------------------------------------------------------------
q4.)

class Node{
	int data;
	Node next;
	Node(int data){
		this.data=data;
	}
}

class MinStack{
	static int min;
	public static int getMinimum(){
		return min;
	}

}

class Stack{
	int top;
	int[] arr;
	Node head;
	int min;
	Stack(){
		top=-1;
	}
	void push(int data){			
		Node temp=new Node(data);
			if(top==-1){
				min=data;
			}
			else{
				min=min<data?min:data;
			}
			MinStack.min=this.min;
			temp.next=head;
			head=temp;
			top++;
			
	}
	Node pop(){
		if(top == -1){
			System.out.println("Under flow ");
			return null;
		}
		else{
			Node a=head;
			head=head.next;
			top--;
			return a;
		}
	}

	void display(){
		Node temp=head;
		while(temp!=null){
			System.out.println(temp.data);
			temp=temp.next;
		}
	}
}

public class SDemo {
	
	public static void main(String[] args){
		Stack obj=new Stack();
		obj.push(10);
		obj.push(20);
		obj.push(30);
		obj.display();
		System.out.println("=============");
		System.out.println("Minimum -> "+MinStack.getMinimum());
	}
}